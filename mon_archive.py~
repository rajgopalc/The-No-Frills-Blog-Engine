import os
import cgi
import datetime
import wsgiref.handlers
import logging

from google.appengine.ext import db
from google.appengine.api import users
from google.appengine.ext import webapp
from google.appengine.ext.webapp import template
from models import *

class MonthArchive(webapp.RequestHandler):
  def get(self,year,month):
	blog_data=BlogData.all_for_month(int(year),int(month))
        user_status=users.get_current_user()
        admin_status=users.is_current_user_admin()
        login=users.create_login_url('/')
	logout=users.create_logout_url('/')
	#logging.debug("Debug of Query object incoming")
	#for data in blog_data:
        #  logging.debug('Author is :'+ data.author)
	#for i in self.get_month_count():
        #    logging.debug(i.count)
	template_value={'blog_data':blog_data,
                        'user_status':user_status,
                        'admin_status':admin_status,
			'logout' : logout,
			'login': login,
			'date_list':self.get_month_count()
                        }
	path = os.path.join(os.path.dirname(__file__), 'pages/index.html')
        self.response.out.write(template.render(path,template_value))
# The below method - get_month_count is based on the code snippet by clapper - Picoblog
  def get_month_count(self):
	hash = BlogData.get_all_datetimes()
	#logging.debug('Hash')
	#logging.debug(hash)
	datetimes = hash.keys()
 	date_count = {}
        for dt in datetimes:
            just_date = datetime.date(dt.year, dt.month, 1)
            try:
               date_count[just_date] += hash[dt]
            except KeyError:
               date_count[just_date] = hash[dt]
	dates = date_count.keys()
	dates.sort()
	dates.reverse()
	return [DateCount(date, date_count[date]) for date in dates]
